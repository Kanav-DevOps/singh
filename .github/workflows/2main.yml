name: Build and Package Application

on:
  push:
    branches:
      - main  # Adjust branch name as per your main branch

jobs:
  build_age_cal_exe:
    runs-on: windows-latest  # Use windows-latest for Windows instance
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Print current directory
      run: |
        echo "Current working directory: $PWD"
        dir  # List contents of current directory
        
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.11'  # Replace with your Python version
        
    - name: Install dependencies
      run: |
        pip install pyinstaller
        
    - name: Print current directory
      run: |
        echo "Current working directory: $PWD"
        dir  # List contents of current directory
        
    - name: Build executable
      run: |
        pyinstaller --onefile age_cal.py  # Adjust path as needed
        
    - name: Print current directory
      run: |
        echo "Current working directory: $PWD"
        dir  # List contents of current directory
        
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: age_cal_exe
        path: dist/age_cal.exe

  build_inno_setup:
    runs-on: windows-latest  # Use windows-latest for Windows instance
    needs: build_age_cal_exe  # Ensure this job runs after build_age_cal_exe job
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Print current directory
      run: |
        echo "Current working directory: $PWD"
        dir  # List contents of current directory
        
    - name: Download age_cal.exe artifact
      uses: actions/download-artifact@v2
      with:
        name: age_cal_exe
        path: age_cal  # Specify the directory where age_cal.exe should be downloaded
        
    - name: Download and install Inno Setup
      run: |
        curl -L -o innosetup.exe "https://jrsoftware.org/download.php/is.exe"
        Start-Process -FilePath "innosetup.exe" -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART" -NoNewWindow -Wait
        
    - name: Print current directory
      run: |
        echo "Current working directory: $PWD"
        dir  # List contents of current directory
        
    - name: Create Inno Setup script
      run: |
        echo "[Setup]
        OutputBaseFilename=setup
        AppVersion=1.0
        DefaultDirName={pf}\kvapp
        DisableProgramGroupPage=yes
        UninstallDisplayIcon={app}\age_cal.exe
        Compression=lzma
        SolidCompression=yes

        [Files]
        Source: age_cal/age_cal.exe; DestDir: {app}; Flags: ignoreversion
        " > setup_script.iss
        
    - name: Print current directory
      run: |
        echo "Current working directory: $PWD"
        dir  # List contents of current directory
        
    - name: Run Inno Setup compiler
      run: |
        Start-Process -FilePath "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" -ArgumentList "inno.iss" -NoNewWindow -Wait
        
    - name: Print current directory
      run: |
        dir
        echo "Current working directory: $PWD"
        dir  # List contents of current directory
        
    - name: Upload Inno Setup installer artifact
      uses: actions/upload-artifact@v2
      with:
        name: setup_exe
        path: Output\setup.exe  # Adjust path to setup.exe output file

  send_email:
    runs-on: windows-latest
    needs: build_inno_setup
    
    steps:
    - name: Download setup.exe artifact
      uses: actions/download-artifact@v2
      with:
        name: setup_exe
        path: .\  # Download to current directory

    - name: Install Send-MailMessage dependencies
      run: |
        Install-Module -Name PSSendGrid -Force -Scope CurrentUser
        Install-Package -Name Microsoft.Graph -Scope CurrentUser -Force
        
    - name: Send email with setup.exe
      run: |
        $smtpServer = $env:SMTP_SERVER
        $smtpPort = $env:SMTP_PORT
        $smtpUser = $env:SMTP_EMAIL
        $smtpPass = $env:SMTP_PASSWORD
        $to = "kanavpreet@aarkglobalinc.com"
        $from = $env:SMTP_EMAIL
        $subject = "Build Artifact: setup.exe"
        $body = "The build artifact (setup.exe) is attached."
        $attachment = ".\setup.exe"
        $securePassword = ConvertTo-SecureString -String $smtpPass -AsPlainText -Force
        $credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $smtpUser, $securePassword
        Send-MailMessage -From $from -To $to -Subject $subject -Body $body -SmtpServer $smtpServer -Port $smtpPort -UseSsl -Credential $credential -Attachments $attachment

    env:
      SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
      SMTP_PORT: ${{ secrets.SMTP_PORT }}
      SMTP_EMAIL: ${{ secrets.SMTP_EMAIL }}
      SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
